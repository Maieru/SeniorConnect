@inherits AuthorizedComponent
@page "/device"

<h3>Meus Diespositivos</h3>

<div class="row" style="margin-top: 16px">
    <div class="col-md-6">
        <a href='/Device/criar' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Adicionar Dispositivo
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Procurar Dispositivo..." @bind="SearchString" @bind:event="oninput" @onkeyup="Filtra" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetaBusca">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>

<br />

<table class="table table-striped align-middle table-bordered">
    <thead class="table-success">
        <tr>
            <th>Código</th>
            <th>Key</th>
            <th>Descricao</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var device in devicesFiltrados)
        {
            <tr>
                <td>@device.DeviceId</td>
                <td>@device.DeviceKey</td>
                <td>@device.Descricao</td>
                <td>
                    <a href='/device/editar/@device.DeviceId' class="btn btn-outline-dark" role="button">
                        Edit
                    </a>
                    <button class="btn btn-outline-danger" role="button" @onclick="(() => DeletarDevice(device.DeviceId))">
                        Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    protected List<IoTDeviceModel> devices;
    protected List<IoTDeviceModel> devicesFiltrados = new();

    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Para o funcionamento adequado, essa chamada SEMPRE deve estar antes do resto do código nesse método
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
            await CarregaLembretes();
    }

    protected async Task CarregaLembretes()
    {
        var requisicaoDeviceAssinatura = await ApiCallHelper.Get<List<IoTDeviceModel>>($"Device/v1/RecuperaDevicesDaAssinatura/{UsuarioLogado.AssinaturaId}", JwtToken);

        if (requisicaoDeviceAssinatura.Sucesso)
        {
            devices = requisicaoDeviceAssinatura.Dados;
            devicesFiltrados = devices;
            StateHasChanged();
        }
    }

    protected void Filtra()
    {
        if (!string.IsNullOrEmpty(SearchString))
            devicesFiltrados = devices.Where(x => x.Descricao.Contains(SearchString)).ToList();
        else
            devicesFiltrados = devices;
    }

    public void ResetaBusca()
    {
        SearchString = string.Empty;
        Filtra();
    }

    protected async Task DeletarDevice(int deviceId)
    {
        var requisicaoDelete = await ApiCallHelper.Delete($"Device/v1/Deletar/{UsuarioLogado.AssinaturaId}", JwtToken);
        devices.RemoveAll(l => l.DeviceId == deviceId);
        StateHasChanged();
    }
}
